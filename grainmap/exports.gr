module LocalHashimapExports

from "runtime/dataStructures" include DataStructures
from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/wasmi64" include WasmI64
from "runtime/unsafe/wasmf32" include WasmF32
from "runtime/unsafe/wasmf64" include WasmF64
from "runtime/unsafe/memory" include Memory
from "int32" include Int32
from "int64" include Int64
from "char" include Char
from "list" include List

from "./imports.gr" include LocalHashimapImports
use LocalHashimapImports.{ type Hashimap }
from "./hashimap.gr" include LocalHashimap as HashimapExports

@unsafe
let _RET_AREA = Memory.malloc(12n)

@unsafe
provide let cabi_realloc = (originalPtr: WasmI32, originalSize: WasmI32, alignment: WasmI32, newSize: WasmI32) => {
  if (WasmI32.eqz(originalPtr)) {
    Memory.malloc(newSize)
  } else {
    let newPtr = Memory.malloc(newSize)
    let amt = if (WasmI32.(<)(originalSize, newSize)) originalSize else newSize
    Memory.copy(newPtr, originalPtr, amt)
    Memory.free(originalPtr)
    newPtr
  }
}

@unsafe
@externalName("foo:foo/hashimap#[constructor]hashimap")
provide let fooFooHashimapConstructorHashimap = () => {
  let result = HashimapExports.Hashimap.constructor()
  Memory.incRef(WasmI32.fromGrain(result))
  WasmI32.load(WasmI32.fromGrain(result.handle), 4n)
}

@unsafe
@externalName("foo:foo/hashimap#[method]hashimap.get")
provide let fooFooHashimapMethodHashimapGet = (arg0: WasmI32, arg1: WasmI32, arg2: WasmI32) => {
  Memory.incRef(arg0)
  let len_string_lift = arg2
  let str_string_lift = DataStructures.allocateString(len_string_lift)
  Memory.copy(WasmI32.(+)(str_string_lift, 8n), arg1, len_string_lift)
  let str_string_lift = WasmI32.toGrain(str_string_lift): String
  let result = HashimapExports.Hashimap.get(WasmI32.toGrain(arg0), str_string_lift)
  match (result) {
    Some(e) => {
      WasmI32.store8(_RET_AREA, 1n, 0n)
      let vec_list_canon_lower = e
      let ptr_list_canon_lower = WasmI32.(+)(WasmI32.fromGrain(vec_list_canon_lower), 8n)
      let len_list_canon_lower = WasmI32.load(WasmI32.fromGrain(vec_list_canon_lower), 4n)
      WasmI32.store(_RET_AREA, len_list_canon_lower, 8n)
      WasmI32.store(_RET_AREA, ptr_list_canon_lower, 4n)
    },
    None => {
      WasmI32.store8(_RET_AREA, 0n, 0n)
    },
  }
  _RET_AREA
}

@unsafe
@externalName("foo:foo/hashimap#[method]hashimap.keys")
provide let fooFooHashimapMethodHashimapKeys = (arg0: WasmI32) => {
  Memory.incRef(arg0)
  let result = HashimapExports.Hashimap.keys(WasmI32.toGrain(arg0))
  let vec_list_lower = result
  let len_list_lower = WasmI32.(>>>)(WasmI32.fromGrain(List.length(vec_list_lower)), 1n)
  let result_list_lower = Memory.malloc(WasmI32.(*)(len_list_lower, 8n))
  let mut list = vec_list_lower
  let mut i = 0n
  while (true) {
    match (list) {
      [] => {
        break
      },
      [e, ...rest] => {
        list = rest
        let base = WasmI32.(+)(result_list_lower, WasmI32.(*)(i, 8n))
        i = WasmI32.(+)(i, 1n)
        let vec_list_canon_lower = e
        let ptr_list_canon_lower = WasmI32.(+)(WasmI32.fromGrain(vec_list_canon_lower), 8n)
        let len_list_canon_lower = WasmI32.load(WasmI32.fromGrain(vec_list_canon_lower), 4n)
        WasmI32.store(base, len_list_canon_lower, 4n)
        WasmI32.store(base, ptr_list_canon_lower, 0n)
      }
    }
  }
  WasmI32.store(_RET_AREA, len_list_lower, 4n)
  WasmI32.store(_RET_AREA, result_list_lower, 0n)
  ignore(result)
  _RET_AREA
}

provide let _start = () => void
